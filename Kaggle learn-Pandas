  一、创建，读取和写入Creating, Reading and Writing
import pandas as pd
1.创建DataFrame #‘Bob’，‘Sue’是列名，后边每个数据是行，index是索引。
pd.DataFrame({'Bob': ['I liked it.', 'It was awful.'], 
              'Sue': ['Pretty good.', 'Bland.']},
             index=['Product A', 'Product B'])
2.创建Series：没有列名，只有综合的名字
pd.Series([30, 35, 40], index=['2015 Sales', '2016 Sales', '2017 Sales'], name='Product A')
3.读取数据文件。CSV文件是用逗号分开的表格tables
wine_reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0) #index明确索引列
wine_reviews.shape #查看数据大小
wine_reviews.head() #查看数据前五行
animals.to_csv("cows_and_goats.csv") #将文件保存为CSV。用to_csv将DataFrame保存为CSV文件。
  二、索引，选择和填充Indexing, Selecting & Assigning
reviews.country====reviews['country'] #这俩都是从DataFrame里选择明确的Series，[]在调用由多个单词组成列名的Series有优势。
reviews['country'][0] #选择‘country’列的第一个元素
  1.iloc：基于在数据中的数字位置，选择数据时使用iloc。在矩阵中通过位置找到索引index
reviews.iloc[0] #选择第一行
python先列后行，loc和iloc都是先行后列
reviews.iloc[:, 0] #获得第一列
reviews.iloc[:3, 0] #获得第一列的前三行 ==== reviews.iloc[[0, 1, 2], 0] #也可通过列表的形式获得第一列前三行
reviews.iloc[1:3, 0] #获得第一列的第二行和第三行
reviews.iloc[-5:] #数据集的最后五行元素
  2.loc：基于标签选择数据。
reviews.loc[0, 'country'] #选择country列的第一个元素
reviews.loc[:, ['taster_name', 'taster_twitter_handle', 'points']] #选择后边这三列的所有值
  3.iloc和loc的区别
iloc[0:10]包括0,1,...,9，返回10个，左闭右开[)；
loc[0:10]包括0,1,...,10，返回11个。可返回string的索引。
reviews.set_index("title") #将‘title’列设置为索引列，用set_index('')
  4.条件选择
reviews.country == 'Italy' #选择'country'列中所有的'Italy'，产生一列布尔值，将'country'列全部选中，但是有'Italy'的是true，没有的是false。
reviews.loc[reviews.country == 'Italy'] #选择同上的列，选出的只是'Italy'为true的列。
reviews.loc[(reviews.country == 'Italy') & (reviews.points >= 90)] #用&将两个问题合并起来。选择了国家是Italy且得分在90以上的葡萄酒。
reviews.loc[(reviews.country == 'Italy') | (reviews.points >= 90)] #用|表示或
reviews.loc[reviews.country.isin(['Italy', 'France'])] #isin选择在list里边的values
reviews.loc[reviews.price.notnull()] #选择价格不是空值Nan的值 isnull()选择是空值的values
  5.填充
reviews['critic'] = 'everyone' #用everyone填充'critic'列。
reviews['critic'] #填充完查看一下
reviews['index_backwards'] = range(len(reviews), 0, -1) #创建一列'index_backwards'，索引从大到小降序排列，最后一行是1.
reviews['index_backwards']
  三、汇总函数和定位Summary Functions and Maps
  1.汇总函数
reviews.points.describe() #描述'point'列，给出max,min,mean,medium,count,四分位数等。如果是字符串数据，给出计数，众数，去重的数量等。
reviews.points.mean() #获得'point'列的均值
reviews.taster_name.unique() #获得'taster_name'列的去重值
reviews.taster_name.value_counts() #获得去重后的每个values的数量
  2.定位
#remean the scores the wines received to 0. 
review_points_mean = reviews.points.mean() 
reviews.points.map(lambda p: p - review_points_mean)


四、五、六、
